import torch
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import numpy as np
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from model import VisionTransformer

device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
print("Running on", device)
transform = transforms.Compose( 
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

batch_size = 32

trainset = torchvision.datasets.CIFAR10(root='/home/niranjan.rajesh_ug23/AML/AML_Distracted_Drivers/data', train=True,
                                        download=False, transform=transform)
class_count = [0] * 10
for _, label in trainset:
    class_count[label] += 1

# Print the class distribution
for i in range(10):
    print("Class {} : {} examples".format(i, class_count[i]))

trainset = torch.utils.data.Subset(trainset, range(0,5000))
trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True)

testset = torchvision.datasets.CIFAR10(root='/home/niranjan.rajesh_ug23/AML/AML_Distracted_Drivers/data', train=False,
                                       download=False, transform=transform)

testset = torch.utils.data.Subset(testset, range(0,500))                                      
testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False)


testset = torchvision.datasets.CIFAR10(root='/home/niranjan.rajesh_ug23/AML/AML_Distracted_Drivers/data', train=False,
                                       download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False)

classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')



# functions to show an image


def imsave(img, name):
    img = img / 2 + 0.5     # unnormalize
    npimg = img.numpy()
    plt.imsave(name, np.transpose(npimg, (1, 2, 0)))
    plt.show()


# get some random training images
# dataiter = iter(trainloader)
# images, labels = next(dataiter)

# show images
# imsave(torchvision.utils.make_grid(images), "./test.jpg")
# print labels
# print(' '.join(f'{classes[labels[j]]:5s}' for j in range(batch_size)))

vit = VisionTransformer(img_size=32, patch_size=2, n_classes=10, depth=6, n_heads=8, p=0.1, attn_p=0.1)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(vit.parameters())
vit.to(device)

for epoch in range(10):  # loop over the dataset multiple times
    running_loss = 0.0
    for i, data in enumerate(trainloader, 0):
        # get the inputs; data is a list of [inputs, labels]
        inputs, labels = data
        inputs, labels = data[0].to(device), data[1].to(device)
        # zero the parameter gradients
        optimizer.zero_grad()

        # forward + backward + optimize
        outputs = vit(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        # print statistics
        running_loss += loss.item()
        if i % 500 == 499:    # print every 2000 mini-batches
            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
            running_loss = 0.0

print('Finished Training')

PATH = '/home/niranjan.rajesh_ug23/AML/AML_Distracted_Drivers/ViT/cifar_vit.pth'
torch.save(vit.state_dict(), PATH)

# TEST
correct = 0
total = 0
# since we're not training, we don't need to calculate the gradients for our outputs
with torch.no_grad():
    for data in testloader:
        images, labels = data
        # calculate outputs by running images through the network
        outputs = vit(images)
        # the class with the highest energy is what we choose as prediction
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print(f'Accuracy of the network on test images: {100 * correct // total} %')